<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="memberMapper">

	<sql id="bs">
		<choose>
			<when test="kind == 'kI'">
				where id like '%'||#{search}||'%'
			</when>
			<when test="kind == 'kN'">
				where name like '%'||#{search}||'%'
			</when>
		</choose>
	</sql>

	<insert id="memberJoin" parameterType="MemberVO">
		insert into member
		values(#{id},#{pw},#{name},#{email},#{address},#{post},#{phone},#{birth},#{gender},5,0,sysdate)
	</insert>
	
	<select id="idCheck" parameterType="MemberVO" resultType="MemberVO">
		select id from member where id = #{id}
	</select>
	<!-- <select id="myPageSelect" parameterType="MemberVO" resultType="MemberVO"> 
		select * from member where id = #{id} </select> -->
	<update id="memberUpdate" parameterType="MemberVO">
		update member set pw = #{pw}, email = #{email},address = #{address}, post = #{post}, phone = #{phone}, name = #{name} 
		where id = #{id}
	</update>
 	
 	<select id="memberLogin" parameterType="MemberVO" resultType="MemberVO">
 		select * from member 
 		where id = #{id} and pw = #{pw}
 	</select>
 	
 	<delete id="memberDelete" parameterType="MemberVO">
 		delete member where id = #{id}
 	</delete> 
 	
 	<select id="memberManagement" resultType="MemberVO" parameterType="com.biscuit.b1.util.Pager">
 		select * from member <include refid="bs"/>
 	</select>
 	
 	<select id="memberManagementDelete" parameterType="String">
 		delete member where id = #{id}
 	</select>
 	
 	<update id="memberManagementUpdate" parameterType="MemberVO">
		update member set id = #{id}, pw = #{pw},name = #{name}, email = #{email},address = #{address},
		post = #{post}, phone = #{phone},gender=#{gender},grade=#{grade},grade_point=#{grade_point}
		where id = #{id}
	</update>
	<select id="memberCount" resultType="Integer">
		select count(*) from member <include refid="bs"/>
	</select>
	<select id="emailCheck" resultType="MemberVO" parameterType="String">
		select email from member where email = #{email} 
	</select>
	
	
	<!-- mypage -->
	<select id="mypageHeart" parameterType="MemberVO" resultType="MovieGradeVO">
<!--   	select * from movie_grade
 	where id=#{id} and moviegrade_heart = 1
 	order by movieinfo_num desc -->
 	 select A.moviegrade_heart, A.movieinfo_title, A.movieinfo_num, B.movieinfo_poster
 	from movie_grade A full join movieinfo B
 	on A.movieinfo_num = B.movieinfo_num
 	where A.id=#{id} and A.moviegrade_heart = 1
 	order by A.movieinfo_num desc
  	</select>
  	
  	<select id="mypageStar" parameterType="MemberVO" resultType="MovieGradeVO">
<!--   	 select * from  movie_grade
 	 where id=#{id} and moviegrade_star != 0
	 order by moviegrade_star desc -->
	select A.moviegrade_star, A.movieinfo_title, A.movieinfo_num, B.movieinfo_poster
 	from  movie_grade A full join movieinfo B
	on A.movieinfo_num = B.movieinfo_num
 	where A.id=#{id} and A.moviegrade_star != 0
	order by A.moviegrade_star desc
  	</select>
	
	<select id="newest" parameterType="MemberVO" resultType="NewestVO">
	select *
	from (select C.movieinfo_title, c.movieinfo_poster,c.movieinfo_num, c.cinema_num, c.timeinfo_start ,D.cinema_name, C.theater_num, C.book_date
	from (select B.movieinfo_title, B.movieinfo_poster, A.movieinfo_num, A.cinema_num, A.timeinfo_start, A.theater_num, A.book_date
	from movie_ticketing A left outer join movieinfo B on A.movieinfo_num = B.movieinfo_num
	where id = #{id}
	) c left outer join cinema D on C.cinema_num = D.cinema_num) E left outer join theater F
	on E.theater_num = F.theater_num
	where rownum = 1
	order by book_date desc
	</select>
	
	<select id="newestThree" parameterType="MemberVO" resultType="NewestVO">
	 <![CDATA[
		select *
		from (select *
		from (select C.movieinfo_title, c.movieinfo_poster,c.movieinfo_num, c.cinema_num, c.timeinfo_start ,D.cinema_name, C.theater_num, C.book_date
		from (select B.movieinfo_title, B.movieinfo_poster, A.movieinfo_num, A.cinema_num, A.timeinfo_start, A.theater_num, A.book_date
		from movie_ticketing A left outer join movieinfo B on A.movieinfo_num = B.movieinfo_num
		where id = #{id}
		) c left outer join cinema D on C.cinema_num = D.cinema_num) E left outer join theater F
		on E.theater_num = F.theater_num)
		where rownum < 4
		order by book_date desc
		 ]]>
	</select>
	<!-- 등급 -->
	<select id="memberGrade" parameterType="MemberVO" resultType="MemberVO">
	select grade_name from member_grade
    where grade_num = (select grade from member where id = #{id}) 
	</select>
	
	<select id="cancelCheck" parameterType="NewestVO" resultType="Integer">
	select seat_check from movie_ticketing 
	where movieinfo_num=#{movieInfo_num} and cinema_num=#{cinema_num} and 
	timeInfo_start = #{timeInfo_start} and theater_num=#{theater_num} and 
	id=#{id} and rownum = 1 order by book_date
	</select>
	
	<update id="cancelUpdate" parameterType="NewestVO">
	update movie_ticketing set seat_check = 1 
	where movie_t_num = (select seat_check from movie_ticketing 
	where movieinfo_num=#{movieInfo_num} and cinema_num=#{cinema_num} and 
	timeInfo_start = #{timeInfo_start} and theater_num=#{theater_num} and 
	id=#{id} and rownum = 1);
	</update>
	
	<select id ="getMovieTicketingVO" parameterType="NewestVO" resultType="Movie_TicketingVO"> <!-- 아래 셀렉트 딜리트에 쓸거 -->
	select * from movie_ticketing 
	where movieinfo_num=#{movieInfo_num} and cinema_num=#{cinema_num} and 
	timeInfo_start = #{timeInfo_start} and theater_num=#{theater_num} and 
	id=#{id} and rownum = 1 order by book_date
	</select>
	
	<delete id="seatDelete" parameterType="Movie_TicketingVO"> <!-- 무비티켓팅VO를 위 매퍼로 받아와야함 이거 쓰는거에 대해선 폼태그 어떻게 할지 얘기해보고 -->
	delete from seat 
	where seat_name = #{seat_name} and
	cinema_num = #{cinema_num} and
	timeInfo_start = #{timeInfo_start} and
	theater_num= #{theater_num} and
	movieInfo_num = #{movieInfo_num} and 
	timeInfo_date = #{timeInfo_date} 
	</delete>
	
</mapper>